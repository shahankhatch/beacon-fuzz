#include <stdio.h>
#include <jni.h>

JNIEnv* create_vm() {
	JavaVM* jvm;
	JNIEnv* env;
	JavaVMInitArgs args;
	JavaVMOption options[1];

	/* There is a new JNI_VERSION_1_4, but it doesn't add anything for the purposes of our example. */
	args.version = JNI_VERSION_1_8;
	args.nOptions = 1;
	options[0].optionString = "-Djava.class.path=|CLASSPATH|:.";
	args.options = options;
	args.ignoreUnrecognized = JNI_FALSE;

	JNI_CreateJavaVM(&jvm, (void **)&env, &args);
	return env;
}

void invoke_class(JNIEnv* env) {
	jclass helloWorldClass;
	jmethodID mainMethod, testAttestationMethod, testAttestationMethod2;
	jobjectArray applicationArgs;
	jstring applicationArg0;

	helloWorldClass = (*env)->FindClass(env, "tech/pegasys/artemis/statetransition/util/FuzzUtil"); //Hello

	mainMethod = (*env)->GetStaticMethodID(env, helloWorldClass, "main", "([Ljava/lang/String;)V");

	applicationArgs = (*env)->NewObjectArray(env, 1, (*env)->FindClass(env, "java/lang/String"), NULL);
	applicationArg0 = (*env)->NewStringUTF(env, "From-C-program");
	(*env)->SetObjectArrayElement(env, applicationArgs, 0, applicationArg0);

	(*env)->CallStaticVoidMethod(env, helloWorldClass, mainMethod, applicationArgs);

	testAttestationMethod = (*env)->GetStaticMethodID(env, helloWorldClass, "testAttestation", "([B[B)Z");


	char* bytes;
	int numBytes = 0;

	jbyteArray array_beaconstate = (*env)->NewByteArray(env, numBytes);
	(*env)->SetByteArrayRegion(env, array_beaconstate, 0, numBytes, (jbyte *) bytes);

  jbyteArray array_attestation = (*env)->NewByteArray(env, numBytes);
  (*env)->SetByteArrayRegion(env, array_attestation, 0, numBytes, (jbyte *) bytes);

  jboolean res = (*env)->CallStaticBooleanMethod(env, helloWorldClass, testAttestationMethod, array_beaconstate, array_attestation);
  printf("res:%d", res);

  testAttestationMethod2 = (*env)->GetStaticMethodID(env, helloWorldClass, "testAttestationRetState", "([B[B)[B");

  jarray res2 = (jarray) (*env)->CallStaticObjectMethod(env, helloWorldClass, testAttestationMethod2, array_beaconstate, array_attestation);
//  printf("res2:%d", res2);
}


int main(int argc, char **argv) {
	JNIEnv* env = create_vm();
	invoke_class( env );
}